import {
	Badge,
	Card,
	CardContent,
	CardDescription,
	CardFooter,
	CardHeader,
	CardTitle,
} from "@ui";
import { useTicker24H } from "./useGetCoin";

type Props = {
	coin: string;
};

const formatDateTime = (ms: number) =>
	new Date(ms).toLocaleString("ru-RU", {
		dateStyle: "medium",
		timeStyle: "short",
	});

function BestCoinsInfo({ coin }: Props) {
	const { data } = useTicker24H(coin);

	if (!data) {
		return <div>–í–æ–∑–º–æ–∂–Ω–æ —Ç—É—Ç —á—Ç–æ-—Ç–æ –±—É–¥–µ—Ç...</div>;
	}

	const priceChange = Number.parseFloat(data.priceChange);
	const priceChangePercent = Number.parseFloat(data.priceChangePercent);
	const priceUp = priceChange > 0;
	const priceDown = priceChange < 0;

	const priceChangeColor = priceUp
		? "text-green-600"
		: priceDown
			? "text-red-600"
			: "text-muted-foreground";

	return (
		<Card className="w-full bg-background shadow-lg">
			<CardHeader>
				<CardTitle className="text-xl">{data.symbol} ‚Äî 24h</CardTitle>
			</CardHeader>
			<CardContent className="grid grid-cols-1 sm:grid-cols-2 gap-4">
				<div>
					<CardDescription>
						<span className="font-semibold">–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</span>{" "}
						{Number(data.lastPrice).toLocaleString("en-US", {
							style: "currency",
							currency: "USD",
						})}
					</CardDescription>
					<CardDescription>
						<span className="font-semibold">–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á:</span>{" "}
						<span className={priceChangeColor}>
							{priceChange} ({priceChangePercent}%)
						</span>
					</CardDescription>
				</div>

				<div>
					<CardDescription>
						<span className="font-semibold">–û–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤ (–±–∞–∑–æ–≤–∞—è):</span>{" "}
						{Number.parseFloat(data.volume).toFixed(2)}
					</CardDescription>
					<CardDescription>
						<span className="font-semibold">–û–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤ (–∫–æ—Ç–∏—Ä—É–µ–º–∞—è):</span>{" "}
						{Number.parseFloat(data.quoteVolume).toFixed(2)}
					</CardDescription>
				</div>

				<div>
					<CardDescription>
						<span className="font-semibold">–ú–∞–∫—Å–∏–º—É–º –∑–∞ 24—á:</span>{" "}
						{Number(data.highPrice).toLocaleString("en-US", {
							style: "currency",
							currency: "USD",
						})}
					</CardDescription>
					<CardDescription>
						<span className="font-semibold">–ú–∏–Ω–∏–º—É–º –∑–∞ 24—á:</span>{" "}
						{Number(data.lowPrice).toLocaleString("en-US", {
							style: "currency",
							currency: "USD",
						})}
					</CardDescription>
				</div>

				<div>
					<CardDescription>
						<span className="font-semibold">–û—Ç–∫—Ä—ã—Ç–∏–µ:</span>{" "}
						{Number(data.openPrice).toLocaleString("en-US", {
							style: "currency",
							currency: "USD",
						})}
					</CardDescription>
					<CardDescription>
						<span className="font-semibold">–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ:</span>{" "}
						{Number(data.prevClosePrice).toLocaleString("en-US", {
							style: "currency",
							currency: "USD",
						})}
					</CardDescription>
				</div>

				<div>
					<CardDescription>
						<span className="font-semibold">–õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞:</span>{" "}
						{Number(data.bidPrice).toLocaleString("en-US", {
							style: "currency",
							currency: "USD",
						})}{" "}
						(–æ–±—ä—ë–º: {data.bidQty})
					</CardDescription>
					<CardDescription>
						<span className="font-semibold">–õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞:</span>{" "}
						{Number(data.askPrice).toLocaleString("en-US", {
							style: "currency",
							currency: "USD",
						})}{" "}
						(–æ–±—ä—ë–º: {data.askQty})
					</CardDescription>
				</div>

				<div>
					<CardDescription>
						<span className="font-semibold">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫:</span>{" "}
						{data.count}
					</CardDescription>
					<CardDescription>
						<span className="font-semibold">–ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:</span>{" "}
						{formatDateTime(data.openTime)}
					</CardDescription>
					<CardDescription>
						<span className="font-semibold">–ö–æ–Ω–µ—Ü –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:</span>{" "}
						{formatDateTime(data.closeTime)}
					</CardDescription>
				</div>
			</CardContent>
			<CardFooter>
				<CardDescription className="flex flex-wrap gap-2">
					{priceUp && <Badge variant="outline">üìà –†–æ—Å—Ç</Badge>}
					{priceDown && <Badge variant="outline">üìâ –ü–∞–¥–µ–Ω–∏–µ</Badge>}
					{Number(data.quoteVolume) > 10_000_000 && (
						<Badge variant="outline">üí∏ –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è</Badge>
					)}

					{Number(data.highPrice) / Number(data.lowPrice) - 1 > 0.1 && (
						<Badge variant="outline">‚ö° –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å</Badge>
					)}

					{Number(data.highPrice) / Number(data.lowPrice) - 1 < 0.02 && (
						<Badge variant="outline">üõå –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å</Badge>
					)}

					{Number(data.count) > 50_000 && (
						<Badge variant="outline">üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∞–∫—Ç–∏–≤</Badge>
					)}

					{Number(data.openPrice) > Number(data.prevClosePrice) && (
						<Badge variant="outline">üîº –î–µ–Ω—å –Ω–∞—á–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ</Badge>
					)}

					{Number(data.openPrice) < Number(data.prevClosePrice) && (
						<Badge variant="outline">üîΩ –ó–∞–∫—Ä—ã–ª—Å—è —Ä–æ—Å—Ç–æ–º</Badge>
					)}
				</CardDescription>
			</CardFooter>
		</Card>
	);
}

export { BestCoinsInfo };
